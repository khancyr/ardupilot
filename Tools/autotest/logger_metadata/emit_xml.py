#!/usr/bin/env python

from __future__ import print_function

import emitter

INDENT2 = "  "
INDENT4 = "    "
INDENT6 = "      "
INDENT8 = "        "
INDENT10 = "          "


class XMLEmitter(emitter.Emitter):
    def preface(self):
        return """<?xml version="1.0" encoding="utf-8"?>
<!-- Dynamically generated list of documented logfile messages (generated by parse.py) -->
<loggermessagefile>"""

    def postface(self):
        return "</loggermessagefile>"

    def start(self):
        self.logname = "LogMessages.xml"
        self.fh = open("LogMessages.xml", mode='w')
        print(self.preface(), file=self.fh)

    def emit(self, doccos):
        self.start()
        for docco in doccos:
            print(INDENT2 + '<logformat name="%s">' % docco.name, file=self.fh)
            if docco.url is not None:
                print(INDENT4 + '<url>%s</url>' % docco.url, file=self.fh)
            if docco.description is not None:
                print(INDENT4 + '<description>%s</description>' %
                      docco.description, file=self.fh)
            print(INDENT4 + '<fields>', file=self.fh)
            for f in docco.fields_order:
                print(INDENT6 + '<field name="%s">' % f, file=self.fh)
                if "description" in docco.fields[f]:
                    print(INDENT8 + '<description>%s</description>' %
                          docco.fields[f]["description"], file=self.fh)
                if "bits" in docco.fields[f]:
                    print(INDENT8 + '<bits>%s</bits>' %
                          docco.fields[f]["bits"], file=self.fh)
                print(INDENT6 + '</field>', file=self.fh)

            print(INDENT4 + '</fields>', file=self.fh)

            print(INDENT2 + '</logformat>', file=self.fh)

        self.stop()

    def stop(self):
        print(self.postface(), file=self.fh)
        self.fh.close()
        xml_validator = XmlValidator(self.logname)
        xml_validator.output_validation()

# copy from ..param_metadata.xmlvalidator
from lxml import etree
import filecmp
import difflib
import sys
import os


class XmlValidator(object):
    def __init__(self, file):
        self.file = file
        if self.file == "apm.pdef.xml":
            self.preamble = '''<?xml version="1.0" encoding="utf-8"?>
<!-- Dynamically generated list of documented parameters (generated by param_parse.py) -->
'''
        if self.file == "LogMessages.xml":
            self.preamble = """<?xml version="1.0" encoding="utf-8"?>
<!-- Dynamically generated list of documented logfile messages (generated by parse.py) -->
"""

    def create_pretty_xml(self):
        """Create a new xml using lxml to make it conform to xml style."""
        xml_parser = etree.XMLParser(remove_blank_text=True)
        tree = etree.parse(self.file, xml_parser)
        root = tree.getroot()
        pretty_unicode = etree.tostring(root, pretty_print=True, encoding='unicode')
        f = open(self.file + ".new", mode='w')
        f.write(self.preamble)
        f.write(pretty_unicode)
        f.close()

    def test_validate_xml(self):
        """Compare base xml with pretty xml version."""
        return filecmp.cmp(self.file, self.file + ".new")

    def output_xml_diff(self):
        """Output base xml and pretty xml diff."""
        with open(self.file, 'r') as hosts0:
            with open(self.file + ".new", 'r') as hosts1:
                diff = difflib.unified_diff(
                    hosts0.readlines(),
                    hosts1.readlines(),
                    fromfile=self.file, tofile=self.file + ".new", )
                for line in diff:
                    sys.stdout.write(line)

    def output_validation(self):
        self.create_pretty_xml()
        if not self.test_validate_xml():
            print("File %s has formatting issues, please unsure that parameters descriptions fields are corrects!" % self.file)
            self.output_xml_diff()
            os.remove(self.file + ".new")
            exit(1)
        else:
            os.remove(self.file + ".new")
            exit(0)
